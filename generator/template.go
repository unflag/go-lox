//go:build ignore
// +build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"log"
	"os"
	"strings"
	"text/template"
)

const (
	generatedFileName = "../ast_type_gen.go"
)

func main() {
	cwd, err := os.Getwd()
	if err != nil {
		log.Panicf("%+v", err)
	}

	dirs := strings.Split(cwd, "/")
	cwd = dirs[len(dirs)-1]
	fileName := os.Getenv("GOFILE")

	var buf bytes.Buffer
	if err = astTemplate.Execute(&buf, struct {
		SourceFileName string
		ASTType        map[string]map[string]any
	}{
		SourceFileName: fmt.Sprintf("%s/%s", cwd, fileName),
		ASTType: map[string]map[string]any{
			"Binary": map[string]any{
				"Left":     "Expr",
				"Operator": "*Token",
				"Right":    "Expr",
			},
			"Grouping": map[string]any{
				"Expression": "Expr",
			},
			"Literal": map[string]any{
				"Value": "any",
			},
			"Unary": map[string]any{
				"Operator": "*Token",
				"Right":    "Expr",
			},
		},
	}); err != nil {
		log.Panicf("%+v", err)
	}

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		log.Panicf("%+v\n%s", err, string(buf.Bytes()))
	}

	if err := os.WriteFile(generatedFileName, formatted, 0644); err != nil {
		log.Panicf("%+v", err)
	}
}

var astTemplate = template.Must(template.New("").Parse(
	`// Code generated by go generate; DO NOT EDIT.
// Source: {{ .SourceFileName }}

package main

type Expr interface {}

type Visitor[T any] interface {
	Visit(e Expr) T
}

func Accept[T any](e Expr, v Visitor[T]) T {
	return v.Visit(e)
}

{{ range $typeName, $typeDefinition := .ASTType -}}
type {{ $typeName }} struct {
  {{- range $field, $type := $typeDefinition }}
  {{ $field }} {{ $type }}
  {{- end }}
}

{{ end -}}
`))
